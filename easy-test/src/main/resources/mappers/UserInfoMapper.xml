<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace：命名空间，绑定的是一个对应的mapper接口-->
<mapper namespace="com.devil.dao.UserInfoDao">
<!--    实体类和数据库字段做映射-->
    <resultMap id="result_map" type="userInfo">
<!--    column：数据库字段   property：实体类字段 -->
        <result column="user_id" property="userId"/>
        <result column="user_name" property="userName"/>
        <result column="phone" property="phone"/>
        <result column="password" property="password"/>
        <result column="birthday" property="birthday"/>
        <result column="sex" property="sex"/>
        <result column="position" property="position"/>
        <result column="roles" property="roles"/>
        <result column="create_time" property="createTime"/>
    </resultMap>
    <!--
    TODO id: 对应的是 namespace中的方法名
     resultType：Sql语句的返回值
     parameterType：参数类型
    -->
    <select id="selectCount" resultType="java.lang.Integer">
        select count(1) from user_info where phone = #{phone}
    </select>

    <insert id="insert" parameterType="userInfo">
        insert into user_info
        (user_name, phone, password, birthday, sex, position, roles, create_time)
        values
        (#{userName}, #{phone}, #{password}, #{birthday}, #{sex}, #{position}, #{roles}, #{createTime})
    </insert>

    <select id="selectPassword" resultType="java.lang.String">
        select password from user_info where user_id=#{userId}
    </select>

    <update id="updateByUserId" parameterType="userInfo">
        update user_info set
        user_name= #{userInfo.userName},
        phone = #{userInfo.phone},
        password= #{userInfo.password},
        birthday = #{userInfo.birthday},
        sex = #{userInfo.sex},
        position = #{userInfo.position},
        roles = #{userInfo.roles}
        where user_id = #{userInfo.userId}
    </update>

    <select id="getUserInfoByUserId" resultMap="result_map">
        select * from user_info where user_id = #{userId}
    </select>

    <update id="updatePassword">
        update user_info set
        password = #{password}
        where user_id= #{userId}
    </update>

    <delete id="delUser" parameterType="java.lang.Integer">
        delete from user_info where user_id = #{userId}
    </delete>

    <select id="selectCounts" resultType="java.lang.Integer">
        select count(*) from user_info
    </select>

    <select id="getAllUsers" resultMap="result_map">
        select * from user_info limit #{pageStart},#{pageSize}
    </select>

    <!--
      1. 只传  userNameFuzzy， 没传 phoneFuzzy
      TODO select count(1) from user_info where user_name like %userNameFuzzy%

       2. 只传  phoneFuzzy， 没传 userNameFuzzy
      TODO select count(1) from user_info where phone like %phoneFuzzy%

      3 . 传了 userNameFuzzy，和 userNameFuzzy
      TODO select count(1) from user_info where user_name like %userNameFuzzy% and phone like %phoneFuzzy% =》正确
  -->

    <select id="selectCountByParam" resultType="java.lang.Integer">
        select count(1) from user_info
        <where>
            <!--if标签
               TODO 如果 满足条件就会 拼接标签中的sql语句
                如果只有第二个条件满足，会自动去除 where 后面的一个 and
           -->
            <if test="query.userNameFuzzy != '' and query.userNameFuzzy != null ">
                user_name like concat('%',#{query.userNameFuzzy},'%')
            </if>
            <if test="query.phoneFuzzy != '' and query.phoneFuzzy != null">
                and phone like concat('%',#{query.phoneFuzzy},'%')
            </if>
        </where>
    </select>


    <select id="selectListParam" resultMap="result_map">
        select * from user_info
        <where>
            <!--if标签
               TODO 如果 满足条件就会 拼接标签中的sql语句
                如果只有第二个条件满足，会自动去除 where 后面的一个 and
           -->
            <if test="query.userNameFuzzy != '' and query.userNameFuzzy != null ">
                user_name like concat('%',#{query.userNameFuzzy},'%')
            </if>
            <if test="query.phoneFuzzy != '' and query.phoneFuzzy != null">
                and phone like concat('%',#{query.phoneFuzzy},'%')
            </if>
        </where>
        order by user_id desc limit #{query.simplePage.start},#{query.simplePage.pageSize}
    </select>

    <select id="selectByPhone" resultMap="result_map">
        select * from user_info where phone = #{phone}
    </select>
</mapper>
